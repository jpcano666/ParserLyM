/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(P1_jpcano_jsgutierrezs)
package uniandes.teolen.parserJavaCC.P1;

import java.util.ArrayList;

public class P1_jpcano_jsgutierrezs
{

  private static ArrayList<String > variables = new ArrayList<String >();

  private static ArrayList<String > metodos = new ArrayList<String >();

  public static boolean buscarNombre(String a, ArrayList<String > list)
  {
	for(int i = 0; i < list.size(); ++i)
	{
	  if(a.equalsIgnoreCase(list.get(i)))
	  {
	    return true;
	  }
	}
	return false;
  }
  
  public static void main(String args []) throws ParseException
  {
    try
    {
      P1_jpcano_jsgutierrezs parser = new P1_jpcano_jsgutierrezs(System.in);
      parser.programa();
      System.out.println("\tAnalizador terminado");
    }
    catch(Exception e)
    {
      System.out.println(e.getMessage());
	  System.out.println("\tAnalizador ha terminado.");
    }
  }
}

PARSER_END(P1_jpcano_jsgutierrezs)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN:
{
  < IF : "if" > //1
| < VAR : "var" > //2
| < DEFINE : "define" > //3
| < PRINT : "print" > //4
| < SMALL : ["a"-"z"] > //5
| < LARGE : ["A"-"Z"] > //6
| < IDENTIFIER : ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])*> //7
| < METHOD : ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])* >
}

TOKEN:
{
  < LP : "(" > //8
| < RP : ")" > //9
| < SEMICOLON : ":" >//10
| < COMMA : "," > //11
| < SR : "[" >
| < SL : "]" >
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" > //12
| < MINUS : "-" > //13
| < MULTIPLY : "*" > //14
| < DIVIDE : "/" > //15
| < EQUALS : "=" > //16
| < MODULO : "%" > //17
}

TOKEN:
{
  < ME : "<" > //18
| < MA : ">" > //19
| < PE : "<=" > //20
| < LE : ">=" > //21
| < EQ : "==" > //22
| < DI : "!=" > //23
| < AND : "&&" > //24
| < OR : "||" > //25
}

//12+12

TOKEN :
{
  < CONSTANT : (["0"-"9"])+ > //25
| < DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //26
}

void programa():
{}
{
  (guardarVar())+ (methods())+ [print()]< EOF >
}

void guardarVar() throws Error:
{
  Token t = null;
}
{
  < VAR >
  t = <IDENTIFIER >
  < EQUALS >(["-"]< CONSTANT >)+
  {
    String a = t.image;

	if(buscarNombre(a, variables))
	{
	  System.out.println("La variable ya existe");
	  throw new Error("La variable ya existe");
	}
	else if(a.equalsIgnoreCase("var") || a.equalsIgnoreCase("if") || a.equalsIgnoreCase("define") || a.equalsIgnoreCase("print"))
	{
	  System.out.println("La palabra var está reservada");
	  throw new Error("La palabra var está reservada");
	}
	else
	{
	  variables.add(a);
	}
  }
}

Token name():
{
  Token t;
}
{
  t = < IDENTIFIER >
  [<LP >expresionArit()(< COMMA >expresionArit())*< RP >]
  {
    String a = t.image;

    if(!buscarNombre(a, variables) && !buscarNombre(a, metodos))
    {
      throw new Error("El nombre no existe");
    }
    else
    {
      return t;
    }
  }
}

void methods() throws Error:
{
  Token t;
}
{
  < DEFINE >
  t = <IDENTIFIER >
  < LP >[< IDENTIFIER >(< COMMA >< IDENTIFIER >)*]<RP ><SEMICOLON >(ifSentence()|expresionArit())*
  
  {
    String a = t.image;

    if(buscarNombre(a, metodos) || buscarNombre(a, variables))
    {
      throw new Error("Ya existe el nombre");
    }
    else if(a.equals("var") || a.equalsIgnoreCase("if") || a.equalsIgnoreCase("define") || a.equalsIgnoreCase("print"))
    {
      throw new Error("Var está reservado");
    }
    else
    {
      metodos.add(a);
    }
  }
}

void operadores():
{}
{
  < MA >
| < EQ >
| < ME >
| < PE >
| < LE >
| < DI >
}

void ifSentence():
{}
{
  < IF ><LP >condicion()","(expresionArit()|ifSentence())","(expresionArit()|ifSentence())< RP >
}

void valor():
{
}
{
  LOOKAHEAD(2)(name()|["-"]<CONSTANT >) | expresionArit()
}

void expresionArit():
{}
{
  LOOKAHEAD(2)(["-"]< CONSTANT >|name()) | (name()|["-"]< CONSTANT >) operadorArit() (["-"]< CONSTANT >|name()|< SR >expresionArit() < SL >)
}

void condicion():
{}
{
  valor()operadores()valor()
}

void print():
{
}
{
  < PRINT >"("expresionArit()")"
}

void operadorArit():
{}
{
  < PLUS >
| < MINUS >
| < MULTIPLY >
| < DIVIDE >
| < MODULO >

}



