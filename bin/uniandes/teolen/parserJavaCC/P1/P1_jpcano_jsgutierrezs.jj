/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(P1_jpcano_jsgutierrezs)
package uniandes.teolen.parserJavaCC.P1;

import java.util.ArrayList;

public class P1_jpcano_jsgutierrezs
{

  private static ArrayList<String > variables = new ArrayList<String >();

  private static ArrayList<String > metodos = new ArrayList<String >();

  public static void insert(Token value)
  {
    variables.add(value.image);
  }

  

  public static boolean buscarNombre(String a, ArrayList<String > list)
  {
	for(int i = 0; i < list.size(); ++i)
	{
	  if(a.equalsIgnoreCase(list.get(i)))
	  {
	    return true;
	  }
	}
	return false;
  }
  
  public static void main(String args []) throws ParseException
  {
    P1_jpcano_jsgutierrezs parser = new P1_jpcano_jsgutierrezs(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        P1_jpcano_jsgutierrezs.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(P1_jpcano_jsgutierrezs)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN:
{
  < IF : "if" > //1
| < VAR : "var" > //2
| < DEFINE : "define" > //3
| < PRINT : "print" > //4
| < SMALL : ["a"-"z"] > //5
| < LARGE : ["A"-"Z"] > //6
| < IDENTIFIER : ["a"-"z"](["a"-"z","A"-"Z","0"-"9"])*> //7
}

TOKEN:
{
  < LP : "(" > //8
| < RP : ")" > //9
| < SEMICOLON : ":" >//10
| < COMMA : "," > //11
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" > //12
| < MINUS : "-" > //13
| < MULTIPLY : "*" > //14
| < DIVIDE : "/" > //15
| < EQUALS : "=" > //16
| < MODULO : "%" > //17
}

TOKEN:
{
  < ME : "<" > //18
| < MA : ">" > //19
| < PE : "<=" > //20
| < LE : ">=" > //21
| < EQ : "==" > //22
| < DI : "!=" > //23
| < AND : "&&" > //24
| < OR : "||" > //25
}

//12+12

TOKEN :
{
  < CONSTANT : (["0"-"9"])+ > //25
| < DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //26
}

void guardarVar() throws Error:
{
  Token t = null;
}
{
  t = < VAR > <IDENTIFIER >"="(["-"]< CONSTANT >)*
  {
    String a = t.image;
    String[] f = a.split("=");
    String nombre = f[0].substring(3, f[0].length());

	if(buscarNombre(nombre, variables))
	{
	  System.out.println("La variable ya existe");
	  throw new Error("La variable ya existe");
	}
	else if(nombre.equalsIgnoreCase("var") || nombre.equalsIgnoreCase("if") || nombre.equalsIgnoreCase("define") || nombre.equalsIgnoreCase("print"))
	{
	  System.out.println("La palabra var está reservada");
	  throw new Error("La palabra var está reservada");
	}
	else
	{
	  variables.add(nombre);
	}
  }
}

void metodo() throws Error:
{
  Token t;
}
{
  t = <IDENTIFIER >"("[(< IDENTIFIER >|"-"< CONSTANT >)(","(< IDENTIFIER >|"-"< CONSTANT >))*]")"
  {
    String a = t.image;
    String[] f = a.split("(");
    String nombre = f[0];

    if(!buscarNombre(nombre, metodos))
    {
      throw new Error("El método no existe");
    }
  }
}

void methods() throws Error:
{
  Token t;
}
{
  t = < DEFINE ><IDENTIFIER >"("[< IDENTIFIER >(","< IDENTIFIER >)*]"):"(ifSentence())*
  
  {
    String a = t.image;
    String[] f = a.split("(");
    String nombre = f[0].substring(6, f[0].length());

    if(buscarNombre(nombre, metodos))
    {
      throw new Error("Ya existe el nombre");
    }
    else if(nombre.equals("var") || nombre.equalsIgnoreCase("if") || nombre.equalsIgnoreCase("define") || nombre.equalsIgnoreCase("print"))
    {
      throw new Error("Var está reservado");
    }
    else
    {
      metodos.add(nombre);
    }
  }
}

void operadores():
{}
{
  < MA >
| < EQ >
| < ME >
| < PE >
| < LE >
| < DI >
}

void ifSentence():
{}
{
  < IF ><LP >condicion()","(expresionArit()|ifSentence())","(expresionArit()|ifSentence())
}

void valor():
{
}
{
  LOOKAHEAD(2)(< IDENTIFIER >|["-"]<CONSTANT >) | expresionArit()
}

void expresionArit():
{}
{
  LOOKAHEAD(2)(["-"]< CONSTANT >|< IDENTIFIER >)
| (< IDENTIFIER >|["-"]< CONSTANT >) operadorArit() (["-"]< CONSTANT >|< IDENTIFIER >|"["expresionArit()"]")
}

void condicion():
{}
{
  valor()operadores()valor()
}

void print():
{
  Token t;
}
{
  t = < PRINT >"("expresionArit()")"
}

int operadorArit():
{}
{
  (< PLUS > { return 1; })
| (< MINUS > {return 1; })
| (< MULTIPLY > {return 1; })
| (< DIVIDE > {return 1; })
| (< MODULO > { return 1; })
| { return 0; }

{return 0; }
}



