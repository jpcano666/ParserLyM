/* Generated By:JavaCC: Do not edit this line. NuevoParser201820.java */
package proyecto2;
import java.util.*;
import calculator.*;
public class NuevoParser201820 implements NuevoParser201820Constants {

HashMap<String, Integer> nameTable = new HashMap<String, Integer>();

public static void main(String[] args)
{
        System.out.println("Hello World");
        try
        {
          NuevoParser201820 parser = new NuevoParser201820(System.in);
          parser.one_line();
        }
        catch(Exception e)
        {
          e.printStackTrace();
        }
}

  final public int one_line() throws ParseException {
  ArrayList <String >  nullParams =  new ArrayList <String > ();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      varDef();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      funDef();
    }
    jj_consume_token(PRINT);
    jj_consume_token(28);
    exp(nullParams);
    jj_consume_token(29);
 {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  final public void varDef() throws ParseException {
Token  t, f;
ArrayList <String >  nullParams =  new ArrayList <String > ();
VarDef varDef;
    jj_consume_token(VAR);
    t = jj_consume_token(NAME);
    jj_consume_token(30);
    exp(nullParams);
     if (nameTable.get(t.image) != null)  {if (true) throw new Error("Varable ya definida");}
     else  nameTable.put(t.image,-1);
  }

  final public void funDef() throws ParseException {
  Token  t,f;
  ArrayList <String >  params =  new ArrayList <String > ();
    jj_consume_token(DEFINE);
    f = jj_consume_token(NAME);
    jj_consume_token(28);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
                               params.add(t.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(31);
        t = jj_consume_token(NAME);
                                          if (params.indexOf(t.image) == -1)
                                params.add(t.image);
                       else
                                {if (true) throw new Error("Nombre de par\u00c3\u00a1metro repetido: "+t.image);}
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(29);
    jj_consume_token(32);
    // se guarda el nombre y la aridad antes del cuerpo  de la funcion para permitir recursion
    if (nameTable.get(f.image) != null)  {if (true) throw new Error("Nombre ya definido: "+f.image);}
    else nameTable.put(f.image,params.size());
    exp(params);
  }

  final public int exp(ArrayList <String > params) throws ParseException {
  int i = 0;
  int a;
  int b;
  Token op;
  String opS;
  Token t;
    // Parses  E -> E + T
    //         E -> E - T
    //         E -> T
    //   in EBNF:  E -> T {+ T   | - T }
    
     a = term(params);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        b = term(params);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        b = term(params);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  opS = op.image;
  MathExp exp = new MathExp(a, opS, b);
  i = exp.getExp();
  {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public int term(ArrayList <String > params) throws ParseException {
        int i = 0;
        int a;
        int b;
        Token op;
        String opS;
    // Parses  T -> T * F
    //         T -> T / F
    //         T -> F
    //   in EBNF:  T -> F {* F   | /  F }
    
     a = fact(params);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        op = jj_consume_token(MULTIPLY);
        b = fact(params);
        break;
      case DIVIDE:
        op = jj_consume_token(DIVIDE);
        b = fact(params);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   opS = op.image;
   MathExp expresion = new MathExp(a, opS, b);
   i = expresion.getExp();
   {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public int fact(ArrayList <String > params) throws ParseException {
// Parses  F -> B
//         F -> -B
//         B -> num
//         B -> '(' E ')'
//         B -> var
//    	   B -> funName( [arg {, args }])
//   in EBNF:  F -> [-](var |num |'(' E ')')

int i = 0;
Token t;
Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      varORcall(params);
      break;
    case INT:
      i = num();
      break;
    case 28:
      jj_consume_token(28);
      i = exp(params);
      jj_consume_token(29);
      break;
    case IF:
      i = condExp(params);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                          {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public int num() throws ParseException, Error {
        int total=1;
        Token token;
    token = jj_consume_token(INT);
                try {
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        // Dada la forma de <ENTERO>, sabemos que solo puede tener digitos 
                        {if (true) throw new Error("Numero demasiado grande: "+token.image);}
                }
                {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  final public void varORcall(ArrayList <String > params) throws ParseException, Error {
        int args=-1, def=-2;
        boolean isParam=false;
        Token token;
    token = jj_consume_token(NAME);
                      isParam = (params.indexOf(token.image) != -1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
          args++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case INT:
      case IF:
      case NAME:
      case 28:
        exp(params);
                                  args++;
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
          jj_consume_token(31);
          exp(params);
                                                              args++;
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(29);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
   if (isParam) {
         if (args > -1)  {if (true) throw new Error("Parametros no pueden ir seguidos de ( ):"+token.image);}
   }
   else {
                if (nameTable.get(token.image) == null) {if (true) throw new Error("Nombre indefinido: "+token.image);}
        else {
                        if (nameTable.get(token.image)==-1) {
                                if (args > -1) {if (true) throw new Error("Variables no pueden ir segudas de  ():" + token.image);}
             }
                        else {
                                if (args!=nameTable.get(token.image) )
                                    {if (true) throw new Error("Numero de argumentos invalido: "+args+" para :"+ token.image+"/"+nameTable.get(token.image));}
                        }
                }
        }
  }

  final public int condExp(ArrayList <String > params) throws ParseException, Error {
  int i = 0;
    jj_consume_token(IF);
    jj_consume_token(28);
    boolExp(params);
    jj_consume_token(31);
    exp(params);
    jj_consume_token(31);
    exp(params);
    jj_consume_token(29);
      {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public boolean boolExp(ArrayList <String > params) throws ParseException {
  boolean a = false, b = false;
  Token t = null;
    // Parses  BE -> BE or BT
    //         BE -> BE
    //   in EBNF:  BE -> BT {or B }
    
     a = boolTerm(params);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(OR);
      b = boolTerm(params);
    }
   if(t== null)
   {
     {if (true) return a;}
   }
   else
   {
     BoolDeclaration bool = new BoolDeclaration(a, b, t.image);
                {if (true) return bool.getComp();}
        }
    throw new Error("Missing return statement in function");
  }

  final public boolean boolTerm(ArrayList <String > params) throws ParseException {
boolean a = false, b = false;
Token t = null;
    // Parses  BT -> BT and BF
    //         BT -> BF
    //   in EBNF:  BT ->  BF {and BF}
    a = boolFact(params);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(AND);
      b = boolFact(params);
    }
        if(t==null)
        {
          {if (true) return a;}
        }
        else
        {
                BoolDeclaration bool = new BoolDeclaration(a, b, t.image);
                {if (true) return bool.getComp();}
        }
    throw new Error("Missing return statement in function");
  }

  final public boolean boolFact(ArrayList <String > params) throws ParseException {
  Token t=null;
  int i=0, j=0;
  boolean a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      condExp(params);
      jj_consume_token(29);
      break;
    case 33:
      jj_consume_token(33);
      i = exp(params);
      t = cmpOperator();
      j = exp(params);
      jj_consume_token(34);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     BoolDeclaration bool = new BoolDeclaration(i, j, t.image);
     {if (true) return bool.getComp();}
    throw new Error("Missing return statement in function");
  }

  final public int print() throws ParseException {
  Token t;
    jj_consume_token(PRINT);
    jj_consume_token(28);
    funDef();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      jj_consume_token(31);
      funDef();
    }
  }

  final public Token cmpOperator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NEQ:
      t = jj_consume_token(NEQ);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case LTE:
      t = jj_consume_token(LTE);
      break;
    case GTE:
      t = jj_consume_token(GTE);
          {if (true) return t;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public NuevoParser201820TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x200000,0x80000000,0x8000000,0xc0,0xc0,0x300,0x300,0x80,0x18110000,0x80000000,0x18110080,0x10000000,0x4000000,0x2000000,0x1000000,0x10000000,0x80000000,0xfc00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public NuevoParser201820(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NuevoParser201820(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NuevoParser201820TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NuevoParser201820(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NuevoParser201820TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NuevoParser201820(NuevoParser201820TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NuevoParser201820TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

/**
Esto guarda -1 por cada nombre que sea una variable, y el número de argumentos si es una función
*/
}
