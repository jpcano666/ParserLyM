/* Generated By:JavaCC: Do not edit this line. ExpRegs.java */
package uniandes.teolen.parserJavaCC.newParser;
import java.util.*;

public class ExpRegs implements ExpRegsConstants {
  static ArrayList<String > mem;
  public ExpRegs()
  {
        mem = new ArrayList< String>();
  }

  public boolean existe(String var)
  {
        boolean a = false;
        for(int i = 0; i < mem.size() && !a; i++)
        {
                if(mem.get(i).equalsIgnoreCase(var))
                {
                  a = true;
                }
        }
        return a;
  }

  final public String ER_NAME() throws ParseException {
  Token t;
String linea;
    t = jj_consume_token(ER_NAME);
    jj_consume_token(21);
    ER();
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY_STRING:
      jj_consume_token(EMPTY_STRING);
      break;
    case CLOSURE_1:
      jj_consume_token(CLOSURE_1);
      break;
    case CLOSURE_2:
      jj_consume_token(CLOSURE_2);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  linea = t.image;
  {if (true) return linea;}
    throw new Error("Missing return statement in function");
  }

  final public String ER() throws ParseException {
  String partes;
  Token t;
    t = jj_consume_token(SYMBOL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY_STRING:
      jj_consume_token(EMPTY_STRING);
      break;
    case CLOSURE_1:
      jj_consume_token(CLOSURE_1);
      break;
    case CLOSURE_2:
      jj_consume_token(CLOSURE_2);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYMBOL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(SYMBOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTY_STRING:
        jj_consume_token(EMPTY_STRING);
        break;
      case CLOSURE_1:
        jj_consume_token(CLOSURE_1);
        break;
      case CLOSURE_2:
        jj_consume_token(CLOSURE_2);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(UNION);
      jj_consume_token(SYMBOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMPTY_STRING:
        jj_consume_token(EMPTY_STRING);
        break;
      case CLOSURE_1:
        jj_consume_token(CLOSURE_1);
        break;
      case CLOSURE_2:
        jj_consume_token(CLOSURE_2);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    partes = t.image;
    {if (true) return partes;}
    throw new Error("Missing return statement in function");
  }

  final public int expsRegs() throws ParseException, Error {
  int r = 0;
  String linea;
    linea = alphabet();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ER_NAME:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      ER_NAME();
    }
            if(existe(linea))
            {
              {if (true) throw new Error("La variable ya existe");}
             }
             else
             {
               mem.add(linea);
              }
            {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public String alphabet() throws ParseException {
        Token t;
        String linea;
    t = jj_consume_token(ALPHABET);
    jj_consume_token(DEFINICION);
    jj_consume_token(LBRACE);
    symbol();
    jj_consume_token(RBRACE);
    linea = t.image;
    {if (true) return linea;}
    throw new Error("Missing return statement in function");
  }

  final public String[] symbol() throws ParseException {
  String[] partes;
  Token t;
    t = jj_consume_token(SYMBOL);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(SYMBOL);
    }
        partes = t.image.split(",");
        {if (true) return partes;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ExpRegsTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000c0,0x8000c0,0x8000,0x8000c0,0x20,0x8000c0,0x20000,0x4000,};
   }

  /** Constructor with InputStream. */
  public ExpRegs(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpRegs(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpRegsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ExpRegs(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExpRegsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ExpRegs(ExpRegsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ExpRegsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
